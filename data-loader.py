# a helper script to load faction names/data into the election doc on firestore

import firebase_admin
from firebase_admin import credentials, firestore

# Initialize Firebase
cred = credentials.Certificate('bigworld-e4cf4-firebase-adminsdk-g6v6y-8cf756ec6c.json')
firebase_admin.initialize_app(cred)
db = firestore.client()

ELECTION_ID = 'r9nizviywIETk3k0t5t2'  # Document ID on Firestore

regions = [
    "The Steps",
    "The Fangs",
    "Vinegar Spire",
    "Tony's Bonefields",
    "Tony's Eighth Base",
    "Zazu's Hideaway",
    "BigDaddy's Beachfront Property",
    "Tone-a-Lago",
    "Krakenhold",
    "The Tip",
    "Wraith-Smith Forge",
    "Spyre",
    "Solace",
    "Paradox Cliffs",
    "Danny's Fishing Village",
    "Valor Cliffs",
    "Dinglebop Plains",
    "Stellar Reach",
    "Smuggler's Pass",
    "Aumasson",
    "Highlands",
    "Lowlands",
    "Krungle",
    "Hoobler's Alley",
    "Mahoney Mountain Pass",
    "Lake Zibbler",
    "Twisted Forest",
    "The Canadian Department",
    "Sakramento",
    "Tony's Trading Outpost",
    "Shroomwood Forest",
    "Monjarnhoe",
    "Mount Twilight",
    "Svathwelier Peninsula",
    "Northreach",
    "Zaros",
    "Maer",
    "Galizea",
    "Even Newer Jersey",
    "Ashor",
    "Pleebletopia",
    "Meronos",
    "Whitefang",
    "Royal Bay",
    "Lumbo",
    "Zalvaris",
    "Isle of Knawlhorn",
    "Adventurer's Gateway",
    "Kingsroad",
    "Merchant's Lane",
    "Araluen",
    "Canisgard",
    "Aelysium",
    "Big Town",
    "Moru",
    "Teras",
    "Scora",
    "Prifddinas",
    "Nalkua",
    "Nosaer",
    "Shneibler Mainland",
    "Roruna",
    "Zazulania"
]

bigdaddy_bias = [
    "Tony's Eighth Base",
    "Tone-a-Lago",
    "Tony's Trading Outpost",
    "Krungle",
    "Aumasson",
    "Sakramento",
    "Tony's Bonefields",
    "The Canadian Department",
    "Zazu's Hideaway",
    "The Steps",
    "Danny's Fishing Village",
    "Lake Zibbler",
    "Northreach",
    "Maer",
    "Canisgard",
    "Moru",
    "Svathwelier Peninsula",
    "Spyre",
    "The Fangs",
    "Ashor",
    "Solace",
    "Whitefang",
    "Zaros",
    "Prifddinas",
    "Nosaer",
    "Roruna",
    "Shneibler Mainland",
    "Hoobler's Alley",
    "Dinglebop Plains",
    "Aelysium",
    "Scora",
    "Wraith-Smith Forge",
    "Mahoney Mountain Pass",
    "Monjarnhoe",
    "Highlands",
    "Mount Twilight",
    "Paradox Cliffs",
    "Stellar Reach",
    "Teras",
    "Krakenhold",
    "Vinegar Spire",
    "Adventurer's Gateway",
    "Isle of Knawlhorn",
    "Shroomwood Forest",
    "Araluen",
    "The Tip",
    "Valor Cliffs",
    "Lowlands",
    "Galizea",
    "Meronos",
    "Royal Bay",
    "Twisted Forest",
    "Zalvaris",
    "Pleebletopia",
    "Merchant's Lane",
    "Nalkua",
    "Kingsroad",
    "Zazulania",
    "Big Town",
    "Even Newer Jersey",
    "Lumbo",
    "BigDaddy's Beachfront Property",
    "Smuggler's Pass"
]

tony_bias = [
    "Smuggler's Pass",
    "The Canadian Department",
    "BigDaddy's Beachfront Property",
    "Mount Twilight",
    "Even Newer Jersey",
    "Big Town",
    "Zazulania",
    "Kingsroad",
    "Nalkua",
    "Lumbo",
    "Pleebletopia",
    "Royal Bay",
    "Meronos",
    "Valor Cliffs",
    "The Tip",
    "Araluen",
    "Shroomwood Forest",
    "Adventurer's Gateway",
    "Vinegar Spire",
    "Krakenhold",
    "Twisted Forest",
    "Teras",
    "Stellar Reach",
    "Paradox Cliffs",
    "Zalvaris",
    "Monjarnhoe",
    "Mahoney Mountain Pass",
    "Wraith-Smith Forge",
    "Scora",
    "Aelysium",
    "Dinglebop Plains",
    "Hoobler's Alley",
    "Krungle",
    "Lowlands",
    "Roruna",
    "Prifddinas",
    "Isle of Knawlhorn",
    "Whitefang",
    "Solace",
    "Ashor",
    "Zaros",
    "The Fangs",
    "Spyre",
    "Svathwelier Peninsula",
    "Highlands",
    "Galizea",
    "Nosaer",
    "Canisgard",
    "Maer",
    "Northreach",
    "Merchant's Lane",
    "Danny's Fishing Village",
    "The Steps",
    "Aumasson",
    "Zazu's Hideaway",
    "Moru",
    "Shneibler Mainland",
    "Lake Zibbler",
    "Sakramento",
    "Tony's Bonefields",
    "Tony's Trading Outpost",
    "Tone-a-Lago",
    "Tony's Eighth Base"
]

tnp_bias = [
    "Smuggler's Pass",
    "Sakramento",
    "Tony's Eighth Base",
    "Tony's Trading Outpost",
    "Tone-a-Lago",
    "Tony's Bonefields",
    "BigDaddy's Beachfront Property",
    "Zazu's Hideaway",
    "Roruna",
    "Moru",
    "Whitefang",
    "Northreach",
    "Wraith-Smith Forge",
    "Shneibler Mainland",
    "Lake Zibbler",
    "Ashor",
    "Even Newer Jersey",
    "Nosaer",
    "Canisgard",
    "Shroomwood Forest",
    "Krakenhold",
    "Prifddinas",
    "Mahoney Mountain Pass",
    "Maer",
    "The Fangs",
    "Zaros",
    "Lowlands",
    "Solace",
    "Aelysium",
    "The Tip",
    "Big Town",
    "The Steps",
    "Hoobler's Alley",
    "Scora",
    "Meronos",
    "Zalvaris",
    "Adventurer's Gateway",
    "Lumbo",
    "Spyre",
    "Vinegar Spire",
    "Twisted Forest",
    "Dinglebop Plains",
    "Monjarnhoe",
    "Nalkua",
    "Isle of Knawlhorn",
    "Danny's Fishing Village",
    "Pleebletopia",
    "Aumasson",
    "Galizea",
    "Merchant's Lane",
    "Mount Twilight",
    "Stellar Reach",
    "Paradox Cliffs",
    "Araluen",
    "Zazulania",
    "Kingsroad",
    "Royal Bay",
    "Valor Cliffs",
    "Highlands",
    "Krungle",
    "Teras",
    "Svathwelier Peninsula",
    "The Canadian Department",
]

regions_by_bias = {
    "BigDaddy": bigdaddy_bias,
    "Tony": tony_bias,
    "TheNightPatrol": tnp_bias
}

candidates = ["BigDaddy", "Tony", "TheNightPatrol"]

simvotes = {key: {region: 0 for region in regions} for key in candidates}

def load_data(candidate_list, region_list, regions_by_bias = None):
    if (regions_by_bias == None):
        fbb = {c: region_list for c in candidate_list }
    else:
        fbb = regions_by_bias

    try:
        db.collection('elections').document(ELECTION_ID).update({
            'regions': region_list,
            'regions_by_bias': fbb,
            'simvotes': simvotes,
            'sim_conics': {},
            'sim_percents': {}
        })
    except Exception as e:
        print(f"Failed to store data: {e}")

if __name__ == '__main__':
    load_data(candidates, regions, regions_by_bias)
    print(simvotes)